#include <stdio.h>
#include <stdlib.h> // for random number function
#include <unistd.h> // for sleep function
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"

#define ADDER_b 0x43C00000
#define REG_0_o 0x0
#define REG_1_o 0x4
#define REG_2_o 0x8
#define REG_3_o 0xC


#define ADDR_GPIO		0x41200000


unsigned char reverse(unsigned char b) {
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
   return b;
}


int main()
{
    init_platform();
    xil_printf("\nps7_uart_1 @ 115200 baud\n\n\r");



	//xil_printf("test #%d\n\r", test_count);

	uint32_t reg0;
	uint32_t reg1;
	uint32_t reg2;
	uint32_t reg3;

	uint32_t trt;

	//Xil_Out32(ADDER_b + REG_0_o, 1111);
	//Xil_Out32(ADDER_b + REG_1_o, 2222);
	//Xil_Out32(ADDER_b + REG_2_o, 3333);


	while(1)
	{

		reg0 = Xil_In32(ADDR_GPIO + REG_0_o);
		reg1 = Xil_In32(ADDR_GPIO + REG_1_o);
		reg2 = Xil_In32(ADDR_GPIO + REG_2_o);
	    reg3 = Xil_In32(ADDR_GPIO + REG_3_o);

	    xil_printf("data %d\n\r", reg3);



	    trt = reverse(reg0);





	    if(reg2 != 0)
	    {
	    	asm("nop");
	    }

	    //sleep(2);

	}









}
